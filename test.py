import aiohttp
import asyncio
import re
import time
from bs4 import BeautifulSoup

# URL cho tra c·ª©u sinh vi√™n
URL = "https://tracuuthongtin.ftu.edu.vn/03_select_tracuuemail_k59.php"
SEMAPHORE = asyncio.Semaphore(1) 

TEST_MSV = "2015810341"

patterns = {
    "M√£ sinh vi√™n": r"M√£ sinh vi√™n:\s*(\d+)",
    "H·ªç v√† T√™n": r"H·ªç v√† T√™n:\s*([\w\s√Ä-·ª∏√†-·ªπ]+?)(?=\s*Kh√≥a:)",
    "Kh√≥a": r"Kh√≥a:\s*(K\d+)",
    "Truy c·∫≠p ƒë·ªãa ch·ªâ": r"Truy c·∫≠p ƒë·ªãa ch·ªâ:\s*(http[^\s]+)",
    "T√†i kho·∫£n truy c·∫≠p": r"T√†i kho·∫£n truy c·∫≠p:\s*([\w.@]+)",
    "M·∫≠t kh·∫©u": r"M·∫≠t kh·∫©u:\s*([\S]+)"
}

async def fetch_data(session, msv):
    """ G·ª≠i request v√† l·∫•y th√¥ng tin sinh vi√™n """
    async with SEMAPHORE:
        try:
            async with session.post(URL, data={"msv": msv}, timeout=5) as response:
                if response.status == 200:
                    text = await response.text()
                    soup = BeautifulSoup(text, "html.parser")
                    if "KH√îNG T√åM TH·∫§Y TH√îNG TIN TRA C·ª®U" in soup.get_text():
                        return f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin cho {msv}"
                    
                    return extract_info(msv, soup)
                else:
                    return f"‚ö†Ô∏è L·ªói HTTP {response.status} khi tra c·ª©u {msv}"
        except Exception as e:
            return f"‚ö†Ô∏è L·ªói khi tra c·ª©u {msv}: {e}"

def extract_info(msv, soup):
    """ Tr√≠ch xu·∫•t th√¥ng tin t·ª´ trang """
    text = soup.get_text(" ", strip=True)
    data = {"M√£ sinh vi√™n tra c·ª©u": msv}
    
    for key, pattern in patterns.items():
        match = re.search(pattern, text)
        data[key] = match.group(1) if match else "Kh√¥ng c√≥ d·ªØ li·ªáu"

    return data

async def main():
    async with aiohttp.ClientSession() as session:
        result = await fetch_data(session, TEST_MSV)
        print("üîç K·∫øt qu·∫£ tra c·ª©u:")
        print(result)

if __name__ == "__main__":
    start_time = time.time()
    asyncio.run(main())
    print(f"‚è±Ô∏è Ho√†n th√†nh trong {time.time() - start_time:.2f}s")
